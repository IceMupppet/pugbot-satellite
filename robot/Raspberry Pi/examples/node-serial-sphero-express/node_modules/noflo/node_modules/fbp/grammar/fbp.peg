/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

{
  var parser, edges, nodes; 

  parser = this;
  delete parser.exports;
  delete parser.inports;
  delete parser.outports;

  edges = parser.edges = [];

  nodes = {};

  parser.addNode = function (nodeName, comp) {
    if (!nodes[nodeName]) {
      nodes[nodeName] = {}
    }
    if (!!comp.comp) {
      nodes[nodeName].component = comp.comp;
    }
    if (!!comp.meta) {
      var metadata = {};
      for (var i = 0; i < comp.meta.length; i++) {
        var item = comp.meta[i].split('=');
        if (item.length === 1) {
          item = ['routes', item[0]];
        }
        metadata[item[0]] = item[1];
      }
      nodes[nodeName].metadata=metadata;
    }
   
  }

  parser.getResult = function () {
    return {processes:nodes, connections:parser.processEdges(), exports:parser.exports, inports: parser.inports, outports: parser.outports};
  }  

  var flatten = function (array, isShallow) {
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }
  
  parser.registerExports = function (priv, pub) {
    if (!parser.exports) {
      parser.exports = [];
    }
    parser.exports.push({private:priv.toLowerCase(), public:pub.toLowerCase()})
  }
  parser.registerInports = function (node, port, pub) {
    if (!parser.inports) {
      parser.inports = {};
    }
    parser.inports[pub.toLowerCase()] = {process:node, port:port.toLowerCase()}
  }
  parser.registerOutports = function (node, port, pub) {
    if (!parser.outports) {
      parser.outports = {};
    }
    parser.outports[pub.toLowerCase()] = {process:node, port:port.toLowerCase()}
  }

  parser.registerEdges = function (edges) {

    edges.forEach(function (o, i) {
      parser.edges.push(o);
    });
  }  

  parser.processEdges = function () {   
    var flats, grouped;
    flats = flatten(parser.edges);
    grouped = [];
    var current = {};
    flats.forEach(function (o, i) {
      if (i % 2 !== 0) { 
        var pair = grouped[grouped.length - 1];
        pair.tgt = o.tgt;
        return;
      }
      grouped.push(o);
    });
    return grouped;
  }
}

start
  = (line)*  { return parser.getResult();  }

line
  = _ "EXPORT=" priv:[A-Za-z.0-9_]+ ":" pub:[A-Z0-9_]+ _ LineTerminator? {return parser.registerExports(priv.join(""),pub.join(""))}
  / _ "INPORT=" node:[A-Za-z0-9_]+ "." port:[A-Z0-9_]+ ":" pub:[A-Z0-9_]+ _ LineTerminator? {return parser.registerInports(node.join(""),port.join(""),pub.join(""))}
  / _ "OUTPORT=" node:[A-Za-z0-9_]+ "." port:[A-Z0-9_]+ ":" pub:[A-Z0-9_]+ _ LineTerminator? {return parser.registerOutports(node.join(""),port.join(""),pub.join(""))}
  / comment [\n\r\u2028\u2029]?
  / _ [\n\r\u2028\u2029]
  / _ edges:connection _ LineTerminator? {return parser.registerEdges(edges);}

LineTerminator
  = _ ","? comment? [\n\r\u2028\u2029]?

comment
  = _ "#" (anychar)*

connection 
  = x:bridge _ "->" _ y:connection { return [x,y]; }
  / bridge

bridge
  = x:port _ proc:node _ y:port     { return [{"tgt":{process:proc, port:x}},{"src":{process:proc, port:y}}]; }
  / iip
  / rightlet
  / leftlet

leftlet
  = proc:node _ port:port  { return {"src":{process:proc, port:port}} }  
  / proc:node _ port:portWithIndex  { return {"src":{process:proc, port:port.port, index: port.index}} }

iip
  = "'" iip:(iipchar)* "'"        { return {"data":iip.join("")} }

rightlet 
  = port:port _ proc:node  { return {"tgt":{process:proc, port:port}} } 
  / port:portWithIndex _ proc:node  { return {"tgt":{process:proc, port:port.port, index: port.index}} }

node
  = node:[a-zA-Z0-9_]+ comp:component? { if(comp){parser.addNode(node.join(""),comp);}; return node.join("")}

component
  = "(" comp:([a-zA-Z/\-0-9_]+)? meta:compMeta? ")" { var o = {}; comp ? o.comp = comp.join("") : o.comp = ''; meta ? o.meta = meta.join("").split(',') : null; return o; }

compMeta 
  = ":" meta:[a-zA-Z/=_,0-9]+  {return meta}


port
  = portname:[A-Z.0-9_]+ __ {return portname.join("").toLowerCase()}

portWithIndex
  = portname:[A-Z.0-9_]+ "[" portindex:[0-9]+ "]"  __ {return { port: portname.join("").toLowerCase(), index: parseInt(portindex.join('')) }}

anychar
  = [^\n\r\u2028\u2029]

iipchar
  = [\\]['] { return "'"; }
  / [^']

_
  = (" "*)?

__
  = " "+
